/*
 * -------------------------------------------------
 *  Nextflow config file for Sarek
 * -------------------------------------------------
 * Imported under the 'aws' Nextflow profile in nextflow.config
 * Defines reference genomes, using paths from s3
 * To be use with AWS Batch
 */

params {
  genome_base = params.genome == 'GRCh37' ? "s3://mskcc-igenomes/igenomes/Homo_sapiens/GATK/GRCh37" : params.genome == 'GRCh38' ? "s3://mskcc-igenomes/igenomes/Homo_sapiens/GATK/GRCh38" : "s3://mskcc-igenomes/smallGRCh37/"
  publishDirMode = 'copy'
  singleCPUMem  = 7.GB // To make the uppmax slurm copy paste work.
  localReportDir = 'Reports'
}

executor {
  name = 'awsbatch'
  awscli = '/home/ec2-user/miniconda/bin/aws'
}

/* Rolling files are currently not supported on s3 */
report.file = "${params.localReportDir}/Sarek_report.html"
timeline.file = "${params.localReportDir}/Sarek_timeline.html"
dag.file = "${params.localReportDir}/Sarek_DAG.svg"
trace.file = "${params.localReportDir}/Sarek_trace.txt"

process {
  queue = params.awsqueue

  errorStrategy = {task.exitStatus == 143 ? 'retry' : 'terminate'}
  maxErrors = '-1'
  maxRetries = 4
  cpus = 2
  memory = 8.GB
  time = { check_max( 18.h * task.attempt, 'time' ) }

  scratch = true

  withName:RunBcftoolsStats {
    cpus = 1
    memory = {params.singleCPUMem * 2} // Memory is doubled so that it won't run two on the same instance
    // Use a tiny queue for this one, so storage doesn't run out
    queue = params.awsqueue_tiny
  }
  withName:RunVcftools {
    cpus = 1
    memory = {params.singleCPUMem * 2} // Memory is doubled so that it won't run two on the same instance
    // Use a tiny queue for this one, so storage doesn't run out
    queue = params.awsqueue_tiny
  }
  withName:RunHaplotypecaller {
    cpus = 1
    // Increase memory quadratically
    memory = {params.singleCPUMem * 2} // Memory is doubled so that it won't run two on the same instance
    // Use a tiny queue for this one, so storage doesn't run out
    queue = params.awsqueue_tiny
  }
  withName:RunGenotypeGVCFs {
    cpus = 1
    memory = {params.singleCPUMem * 2} // Memory is doubled so that it won't run two on the same instance
    // Use a tiny queue for this one, so storage doesn't run out
    queue = params.awsqueue_tiny
  }
}
