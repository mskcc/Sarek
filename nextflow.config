/*
 * -------------------------------------------------
 * Nextflow config file for Sarek
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the configuration folder and imported under a
 * profile name here.
 */

manifest {
  author = 'Szilvester Juhos, Maxime Garcia'
  description = 'Sarek - Workflow For Somatic And Germline Variations'
  homePage = 'http://sarek.scilifelab.se'
  mainScript = 'main.nf'
  name = 'Sarek'
  nextflowVersion = '>=0.32.0'
  version = '2.2.2'
}

env {
  NXF_OPTS="-Xms1g"
}

profiles {
  // AWS Batch with Docker profile
  // Docker images will be pulled automatically
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/aws-batch.config'
    includeConfig 'conf/docker.config'
    includeConfig 'conf/igenomes.config'
    includeConfig 'conf/resources.config'
    includeConfig 'conf/containers.config'
  }
  // Small testing with Docker profile
  // Docker images will be pulled automatically
  docker {
    includeConfig 'conf/base.config'
    includeConfig 'conf/travis.config'
    includeConfig 'conf/genomes.config'
    includeConfig 'conf/docker.config'
    includeConfig 'conf/containers.config'
  }
  // Small testing with Singularity profile
  // Singularity images will be pulled automatically
  singularity {
    includeConfig 'conf/base.config'
    includeConfig 'conf/travis.config'
    includeConfig 'conf/igenomes.config'
    includeConfig 'conf/singularity.config'
    includeConfig 'conf/containers.config'
  }
  conda {
    includeConfig 'conf/base.config'
    includeConfig 'conf/travis.config'
    includeConfig 'conf/genomes.config'
    includeConfig 'conf/conda.config'
  }

  // Default config for Juno cluster in MSKCC running
  // Runs the pipeline using the LSF executor
  // Singularity images will be pulled automatically
  juno {
    includeConfig 'conf/base.config'
    includeConfig "conf/juno.config"
    includeConfig 'conf/igenomes.config'
    includeConfig "conf/singularity.config"
    includeConfig 'conf/resources_juno.config'
    includeConfig 'conf/containers.config'
  }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
